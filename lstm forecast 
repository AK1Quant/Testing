import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load the data
data = pd.read_csv('vix.csv')

# Assuming the CSV has a column named 'VIX'
vix_values = data['VIX'].values

# Normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
vix_scaled = scaler.fit_transform(vix_values.reshape(-1, 1))

# Prepare the dataset for LSTM
def create_dataset(dataset, look_back=1):
    X, Y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset[i:(i + look_back), 0]
        X.append(a)
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)

look_back = 30
X, Y = create_dataset(vix_scaled, look_back)

# Reshape input to be [samples, time steps, features]
X = np.reshape(X, (X.shape[0], look_back, 1))

# Create the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(look_back, 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Fit the model
model.fit(X, Y, epochs=100, batch_size=1, verbose=2)

# Forecast the next 30 values
forecast_input = vix_scaled[-look_back:]
forecast_input = np.reshape(forecast_input, (1, look_back, 1))

forecast = []
for i in range(30):
    next_value = model.predict(forecast_input)
    forecast.append(next_value[0, 0])
    forecast_input = np.append(forecast_input[:, 1:, :], [[next_value]], axis=1)

# Inverse transform the forecasted values
forecast = scaler.inverse_transform(np.array(forecast).reshape(-1, 1))

# Plot the results
plt.plot(vix_values, label='Actual VIX')
plt.plot(range(len(vix_values), len(vix_values) + len(forecast)), forecast, label='Forecasted VIX')
plt.legend()
plt.show()

# Print the forecasted values
print("Forecasted VIX values for the next 30 days:")
print(forecast)
