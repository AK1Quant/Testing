import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from arch import arch_model
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_percentage_error

# Prepare the data
vix_data = vix_data.sort_values('DATE')
vix_series = vix_data['VIX'].values

# Normalize the data
scaler = StandardScaler()
vix_scaled = scaler.fit_transform(vix_series.reshape(-1, 1))
scaled_mean = scaler.mean_[0]
scaled_sd = np.sqrt(scaler.var_[0])

# Create sequences for LSTM
look_back = 10
def create_sequences(data, look_back):
    X, Y = [], []
    for i in range(len(data) - look_back):
        X.append(data[i:(i + look_back)])
        Y.append(data[i + look_back])
    return np.array(X), np.array(Y)

X, Y = create_sequences(vix_scaled, look_back)

# Split the data into training and testing sets
train_size = int(len(X) * 0.8)
X_train, Y_train = X[:train_size], Y[:train_size]
X_test, Y_test = X[train_size:], Y[train_size:]

# Define and train the LSTM model
model = Sequential()
model.add(LSTM(units=50, input_shape=(look_back, 1)))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='adam')

history = model.fit(X_train, Y_train, epochs=100, batch_size=1, validation_split=0.2, verbose=0)

# Predict using the LSTM model
lstm_predictions = model.predict(X_test)

# Inverse transform the predictions and actual values
lstm_predictions_rescaled = lstm_predictions * scaled_sd + scaled_mean
Y_test_rescaled = Y_test * scaled_sd + scaled_mean

# Calculate residuals
residuals = Y_test_rescaled.flatten() - lstm_predictions_rescaled.flatten()

# Fit GARCH model on residuals
garch_model = arch_model(residuals, vol='Garch', p=1, q=1)
garch_fit = garch_model.fit(disp='off')

# Forecast with GARCH model
garch_forecast = garch_fit.forecast(horizon=len(residuals))
garch_predictions = garch_forecast.mean.values[-1, :]

# Combine LSTM and GARCH forecasts
final_predictions = lstm_predictions_rescaled.flatten() + garch_predictions

# Calculate MAPE
mape_value = mean_absolute_percentage_error(Y_test_rescaled.flatten(), final_predictions)
print(f"MAPE: {mape_value}")

# Plot actual vs predicted
plt.plot(Y_test_rescaled, label='Actual', color='blue')
plt.plot(final_predictions, label='Predicted', color='red')
plt.title('VIX Forecast')
plt.ylabel('VIX')
plt.xlabel('Time')
plt.legend()
plt.show()


pip install numpy pandas scikit-learn tensorflow arch matplotlib
