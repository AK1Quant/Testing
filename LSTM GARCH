

```r
# Load necessary libraries
library(keras)
library(rugarch)
library(dplyr)
library(caret)
library(Metrics)

# Prepare the data
vix_data <- vix_data %>% arrange(DATE)
vix_series <- vix_data$VIX

# Normalize the data
vix_scaled <- scale(vix_series)
scaled_mean <- attr(vix_scaled, "scaled:center")
scaled_sd <- attr(vix_scaled, "scaled:scale")

# Create sequences for LSTM
look_back <- 10
create_sequences <- function(data, look_back) {
  X <- array(dim = c(length(data) - look_back, look_back, 1))
  Y <- array(dim = c(length(data) - look_back, 1))
  for (i in 1:(length(data) - look_back)) {
    X[i,,] <- data[i:(i + look_back - 1)]
    Y[i] <- data[i + look_back]
  }
  list(X, Y)
}

sequences <- create_sequences(vix_scaled, look_back)
X <- sequences[[1]]
Y <- sequences[[2]]

# Split the data into training and testing sets
set.seed(123)
train_size <- floor(0.8 * dim(X)[1])
X_train <- X[1:train_size,,]
Y_train <- Y[1:train_size]
X_test <- X[(train_size + 1):dim(X)[1],,]
Y_test <- Y[(train_size + 1):dim(X)[1]]

# Define and train the LSTM model
model <- keras_model_sequential() %>%
  layer_lstm(units = 50, input_shape = c(look_back, 1)) %>%
  layer_dense(units = 1)

model %>% compile(
  loss = 'mean_squared_error',
  optimizer = 'adam'
)

history <- model %>% fit(
  X_train, Y_train,
  epochs = 100,
  batch_size = 1,
  validation_split = 0.2,
  verbose = 0
)

# Predict using the LSTM model
lstm_predictions <- model %>% predict(X_test)

# Inverse transform the predictions and actual values
lstm_predictions_rescaled <- lstm_predictions * scaled_sd + scaled_mean
Y_test_rescaled <- Y_test * scaled_sd + scaled_mean

# Calculate residuals
residuals <- Y_test_rescaled - lstm_predictions_rescaled

# Fit GARCH model on residuals
spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
  distribution.model = "std"
)
fit <- ugarchfit(spec, residuals)

# Forecast with GARCH model
garch_forecast <- ugarchforecast(fit, n.ahead = length(residuals))
garch_predictions <- fitted(garch_forecast)

# Combine LSTM and GARCH forecasts
final_predictions <- lstm_predictions_rescaled + garch_predictions

# Calculate MAPE
mape_value <- mape(Y_test_rescaled, final_predictions)
print(paste("MAPE:", mape_value))

# Plot actual vs predicted
plot(Y_test_rescaled, type = "l", col = "blue", main = "VIX Forecast", ylab = "VIX", xlab = "Time")
lines(final_predictions, col = "red")
legend("topright", legend = c("Actual", "Predicted"), col = c("blue", "red"), lty = 1)
```

### Explanation:
1. **Data Preparation**:
   - `vix_data` is sorted by date.
   - The VIX values are scaled for the LSTM model.
   - A function `create_sequences` is used to create sequences of a specified look-back period for the 

2. **LSTM Model**:
   - Defined with one LSTM layer followed by a dense layer.
   - Compiled and trained using the training data.

3. **Residual Calculation and GARCH Model**:
   - Residuals from the LSTM predictions are calculated.
   - A GARCH(1,1) model is fitted to these residuals.

4. **Forecasting and Evaluation**:
   - Forecasts are made using the GARCH model.
   - Combined predictions are obtained by adding LST